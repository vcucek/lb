#!/bin/bash
# Author: Vito Cucek (vito.cucek@gmail.com)

# Print help
if [[ $1 = "--help" ]]; then
    echo 'List browser'
    echo 'Author: Vito Cucek'
    echo ' '
    echo 'Usage:'
    echo ' lb [-l]'
    echo ' '
    echo 'Options:'
    echo ' -l : number of lines'
    echo ' '
    echo 'Shortcuts:'
    echo ' Start typing to filter displayed lines'
    echo ' '
    echo ' Move   : Up, down arrows'
    echo ' C^u    : Move up 10 lines'
    echo ' C^d    : Move down 10 lines'
    echo ' Return : Print selected line to the stdout and exit'
    echo ' '
    exit 0
fi

## Terminal settings ###########################################################

function _print_out {
    printf '%s' "$@" > /dev/stdout
}

function _print_out_nl {
    printf '%s\n' "$@" > /dev/stdout
}

function _print_tty {
    printf "$@" > /dev/tty
}

SAVEIFS=""
function terminal_setup {
    # set array separator
    SAVEIFS=$IFS
    LB_IFS=$(echo -en "\n\b")
    IFS=$LB_IFS
    
    # disable line wrapping 
    _print_tty '\e[?7l'
    # Hide the cursor
    _print_tty "\e[?25l"
}

function terminal_fetch {
    IFS=$' '
    IFS=$LB_IFS
}

function terminal_restore {
    # restore array separator
    IFS=$SAVEIFS

    # restore line wrapping 
    _print_tty '\e[?7h'
    # Show the cursor
    _print_tty "\e[?25h"
}

## Constants ###################################################################

# Bottom/top padding when scrolling
PADDING=4
# Visible number of lines
HEIGHT=20

# colors
col_cursor=$'\e[1;31m'
col_mark_bg=$'\e[10;103m'
col_mark_fg=$'\e[10;30m'
col_none=$'\e[0m'

## Parameters ##################################################################

# Variable representing cursor line index
dc_cursor=0
# Variable representing top visible line index
dc_begin=0
# Variable representing number of visible lines
dc_height=$HEIGHT
# lines to draw
dc_lines=()

# Current list variables
lines_input=()
lines=()
current_line=

declare -A lines_marked

## Functions ###################################################################

function _marks_toggle {
    # Check if selected
    if [ -n "$current_line" ]; then
        if [ ! -z "${lines_marked[$current_line]}" ]; then
            lines_marked[$current_line]=
        else
            lines_marked[$current_line]=true
        fi
    fi
}

function _marks_args {
    printf "\'%s\' " "${!lines_marked[@]}"
}

## Rendering Functions #########################################################

function _render_row {
    _print_tty "$3$2%s$col_none\033[K\n" "$1"
    ((dc_canvas_height++))
}

function _render {

    local lines_size=${#lines[@]}

    dc_canvas_height=0

    # Clamp cursor
    dc_cursor=$(( $dc_cursor < 0 ? 0 : $dc_cursor ))
    dc_cursor=$(( $dc_cursor > $lines_size-1 ? $lines_size-1 : $dc_cursor ))

    # Print header and navigation bar
    _render_row $1 
    _render_row "---------------------------------------------------------------------------------------"

    dc_begin=$(( $dc_cursor - $dc_begin < $PADDING ? $dc_cursor - $PADDING : $dc_begin ))
    dc_begin=$(( $dc_begin < 0 ? 0 : $dc_begin ))
    dc_begin=$(( $dc_cursor - $dc_begin + $PADDING > $dc_height ? $dc_cursor + $PADDING - $dc_height : $dc_begin ))
    dc_begin=$(( $dc_begin < 0 ? 0 : $dc_begin ))

    for (( i=0; i<$dc_height; i++ )); do
        line_index=$((dc_begin + i))

        line=${lines[line_index]}
        line_draw=${dc_lines[line_index]}

        color_fg=""
        color_bg=""

        # Check if marked
        if [ ! -z "$line" ]; then
            local line_marked=${lines_marked[$line]}
            if [ ! -z "$line_marked" ]; then
                color_bg=$col_mark_bg
                color_fg=$col_mark_fg
            fi
        fi
        # Check if current dc_cursor
        if [ $line_index -eq $dc_cursor ]; then
            current_line=$line
            color_fg=$col_cursor
        fi
        _render_row ${line_draw:-$line} $color_fg $color_bg
    done

    _render_row "---------------------------------------------------------------------------------------"

    # set position to beginning
    _print_tty "\e[2000D"
    _print_tty "\e[%sA" $dc_canvas_height
}

function render_clear {
    _print_tty "\e[J"
}

## Terminal hooks ##########################################################

function _on_terminate(){
    render_clear
    terminal_restore
    exit 0
}

function _on_stop(){
    render_clear
    terminal_restore
    kill -s SIGSTOP $$
}

function _exit(){
    render_clear
    terminal_restore
    exit 0
}

## Init/Exit/Run Functions #################################################

function _initialize() {

    #configure terminal
    terminal_setup
    terminal_fetch

    # Read input from pipe
    STD_IN=$(</dev/stdin)
    lines=($STD_IN)
    lines_input=($STD_IN)

    # Read input from pipe alt
    #while read line
    #do
    #    lines+=($line)
    #    lines_input+=($line)
    #done < /dev/stdin

    # Read input from tty
    exec 0</dev/tty
    # Print to tty
    #exec 1>/dev/tty

    # register signal hooks
    trap _on_stop TSTP
    trap _on_terminate EXIT
    trap 'terminal_fetch; render' WINCH
}

## Program execution ###########################################################


# Initialize terminal, cache, hooks
_initialize

if [[ $1 = "-l" ]]; then
    dc_height=${2:-$HEIGHT};
fi

_render "(filter): $input_text"

while :
do
    # read key
    k1=
    k2=
    k3=
    k4=
    read -sn1 k1
    if [[ $k1 == $'\e' || $k1 == $'\x' ]]; then
        read -sn1 -t 0.0001 k2
        read -sn1 -t 0.0001 k3
        read -sn1 -t 0.0001 k4
    fi
    key=${k1}${k2}${k3}${k4}

    #printf '%s' "$key" | hexdump -C

    # Return
    if [[ $key = $'' ]]; then
        key="consumed"

        # Move to beginning and clear
        _print_tty "\e[2000D"
        _print_tty "\033[2K"

        if [ ${#lines_marked[@]} -ne 0 ]; then
            # Output marked lines
            for i in "${!lines_marked[@]}"
            do
                _print_out_nl "$i"
                _print_tty "\e[2000D"
                _print_tty "\033[2K"
            done
        else
            # Output current line
            _print_out_nl "${lines[$dc_cursor]}"
        fi
        _exit
    # Mark line with insert key
    elif [[ $key = $'\e[2~' ]]; then
        _marks_toggle 
    elif [[ $key = $'\e[4h' ]]; then
        _marks_toggle 
    # Backspace
    elif [[ $key = $'\x7f' ]]; then
        if [[ $input_text != '' ]]; then
            input_text=${input_text:0:-1}
            lines=($(printf '%s' "${lines_input[*]}" | grep -s "$input_text"))
        else
            lines=$lines_input
        fi
        dc_cursor=0
    # Arrow up
    elif [[ $key = $'\e[A' ]]; then 
        dc_cursor=$((dc_cursor - 1))
    # Arrow down
    elif [[ $key = $'\e[B' ]]; then 
        dc_cursor=$((dc_cursor + 1))
    # ^+u
    elif [[ $key = $'\x15' ]]; then
        dc_cursor=$((dc_cursor - 10))
    # ^+d
    elif [[ $key = $'\x04' ]]; then
        dc_cursor=$((dc_cursor + 10))
    # Esc
    elif [[ $key = $'\x1b' ]]; then
        # Move to beginning and clear
        _print_tty "\e[2000D"
        _print_tty "\033[2K"
        _exit
    elif [[ $k1 = $'\e' ]]; then
        continue;
    else
        input_text=$input_text$key
        lines=($(printf '%s' "${lines_input[*]}" | grep -s "$input_text"))
        dc_cursor=0
    fi

    dc_lines=()

    # Move to beginning
    _print_tty "\e[2000D"
    _render "(filter): $input_text"
done

terminal_restore
exit 0
